package game;

import java.io.IOException;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Simplexity implements GenGame {

	private static final int WIDTH = 7;
	private static final int HEIGHT = 6;
	private int whoseTurn = 0;
	
	public int board[][] = new int[WIDTH][HEIGHT];
	
	public Simplexity(){
		System.out.println("Simplexity running");
	}

	/* Simplexity protocol
	 * REQUEST< DATA > => { VALID_RESPONSE(S) }
	 */
	 
	/* Do */
	
	/* DO_MOVE<COLUMN> => {SUCCESS}
	 *   SUCCESS - A move was successfully made
	 */
	private JSONObject _doMove(int playerID, int column, int shape) {
		JSONObject ret = new JSONObject();

		return ret;
	}

	/* Query */
	/* QUERY_TURN => {ID}
	 *   ID - ID of the player who is eligible to make a move
	 */
	 private JSONObject _queryTurn() {
		JSONObject ret = new JSONObject();
		
		return ret;
	 }

	/* QUERY_MOVE => {MOVE}
	 *   MOVE - Return all moves that have occurred since the players last move
	 */
	private JSONObject _queryMove() {
		JSONObject ret = new JSONObject();
		
		return ret;
	}
	 
	/* QUERY_SCORE => {SCORE}
	 *   SCORE - Respond with win/tie/lose totals for all clients
	 */
	private JSONObject _queryScore() {
		JSONObject ret = new JSONObject();
		
		return ret;
	}

	/* sync
	 * perform a full client sync with the server game status
	 */
	@Override
	public JSONObject getStatus() {
		JSONObject ret = new JSONObject();
		try {
			ret.put("TURN", _queryTurn());
			ret.put("MOVE", _queryMove());
			ret.put("SCORE", _queryScore());
		} catch(JSONException e) {
			e.printStackTrace();
		}
	}

	@Override
	public JSONObject doCommand(JSONObject input) {
		JSONObject ret = new JSONObject;
		JSONObjectArray command;
		
		try {
			command = input.getJSONObjectArray("COMMAND");

			if(command.getString(0).equalsIgnoreCase("MOVE")) {
				_doMove(command.getInt(1), command.getInt(2), command.getInt(3));
				break;
			} else {
				/* This should be a custom exception (InvalidCommandException) at some point */
				throw new JSONException();
				break;
			}
		} catch (JSONException e) {
			ret.putInt("RESPONSE", HTTPResponse.FAIL);
			return ret;
		}
		
		return ret;
	}
	
	private boolean checkWin(int id){

	}
	
	private boolean isLegal(int x, int y){
		return (x>=0 && x<WIDTH) && (y>=0 && y<HEIGHT);
	}


}
